#!/usr/bin/env bash

# Constants
declare inline_code="""
import json

def lambda_handler(event, context):
    return {
        "statusCode": 200,
        "body": json.dumps("Hello from Lambda!")
    }
"""

# Creates an IAM role for the Lambda function.
function create_lambda_role() {
  local role_name="$1"

  aws iam create-role \
    --role-name "$role_name" \
    --assume-role-policy-document '{
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "Service": "lambda.amazonaws.com"
          },
          "Action": "sts:AssumeRole"
        }
      ]
    }'

  aws iam attach-role-policy \
    --role-name "$role_name" \
    --policy-arn "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # Wait for the role to propagate
  sleep 10

  # Retrieve and return the role ARN
  aws iam get-role --role-name "$role_name" | jq -r .Role.Arn
}

# Creates an inline AWS Lambda function.
function create_lambda_function() {
  local function_name="$1"
  local runtime="$2"
  local role_arn="$3"
  local handler="$4"

  aws lambda create-function \
    --function-name "$function_name" \
    --runtime "$runtime" \
    --role "$role_arn" \
    --handler "$handler" \
    --code "ZipFile=$(echo "$inline_code" | base64)" \
    --publish
}

# Deletes an existing Lambda function by name.
function delete_lambda_function() {
  local function_name="$1"

  aws lambda delete-function --function-name "$function_name"
}

# Updates an existing Lambda function's code with inline code.
function update_lambda_function_code() {
  local function_name="$1"

  aws lambda update-function-code \
    --function-name "$function_name" \
    --zip-file "fileb://<(echo "$inline_code" | base64)"
}

# Main function to deploy an inline AWS Lambda function.
function main() {
  local function_name="MyInlineLambda"
  local runtime="python3.9"
  local role_name="MyLambdaRole"
  local handler="lambda_function.lambda_handler"

  # Create the role if it does not exist.
  echo "Creating IAM role: $role_name"
  local role_arn=$(create_lambda_role "$role_name")

  # Check if the Lambda function already exists.
  if aws lambda get-function --function-name "$function_name" &>/dev/null; then
    echo "Function $function_name exists. Updating its code..."
    update_lambda_function_code "$function_name"
  else
    echo "Creating a new function: $function_name"
    create_lambda_function "$function_name" "$runtime" "$role_arn" "$handler"
  fi

  echo "Deployment complete for function: $function_name"
}

# Execute main with all script arguments.
main "$@"
