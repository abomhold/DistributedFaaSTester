#!/usr/bin/env bash

# Retrieves all log stream names for a given log group.
function get_log_streams() {
  aws logs describe-log-streams \
    --log-group-name "$1" \
    | jq -r '.logStreams[].logStreamName'
}

# Retrieves events from a given log group/stream combo.
function get_log_events() {
  local log_group="$1"
  local log_stream="$2"

  aws logs get-log-events \
    --log-group-name "$log_group" \
    --log-stream-name "$log_stream" \
    | jq -c '.events[]' &
}

# Parses log events to extract "platform.start" and "message" logs.
function parse_log_events() {
  local log_events="$1"

  local request_id=""
  local start_time=""
  local client_ip=""
  local payload=""

  # Iterate through each log event
  echo "$log_events" | while read -r log; do
    # Decode each log message safely
    local log_decoded
    log_decoded=$(echo "$log" | jq -c '. | fromjson? // {}' 2>/dev/null || echo "{}")

    # Check for "platform.start" type
    if [[ $(echo "$log_decoded" | jq -r '.type // empty') == "platform.start" ]]; then
      request_id=$(echo "$log_decoded" | jq -r '.record.requestId // empty')
      start_time=$(echo "$log_decoded" | jq -r '.time // empty')
      if [[ -n $request_id && -n $start_time ]]; then
        printf "Start Time: %s\nRequest ID: %s\n" "$start_time" "$request_id"
      fi
    fi

    # Check for logs with "clientIp" and "payload" in the message field
    if [[ $(echo "$log_decoded" | jq -r '.message // empty' | grep -q "clientIp") ]]; then
      client_ip=$(echo "$log_decoded" | jq -r '.message' | jq -r '.clientIp // empty' 2>/dev/null)
      payload=$(echo "$log_decoded" | jq -r '.message' | jq -r '.payload.name // empty' 2>/dev/null)
      if [[ -n $client_ip && -n $payload ]]; then
        printf "Client IP: %s\nPayload: %s\n" "$client_ip" "$payload"
      fi
    fi
  done
}

# Main function to iterate through log streams and parse logs.
function main() {
  local log_group="$1"

  if [[ -z "$log_group" ]]; then
    printf "Usage: %s <log_group>\n" "$0" >&2
    exit 1
  fi

  # Retrieve all log streams for the log group.
  mapfile -t log_streams < <(get_log_streams "$log_group")

  for log_stream in "${log_streams[@]}"; do
    # Retrieve and parse log events from the current log stream.
    log_events=$(get_log_events "$log_group" "$log_stream")
    parse_log_events "$log_events"
  done
}

# Execute main function with the specified log group.
main "/trace"
